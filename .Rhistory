geom_vline(aes(xintercept=mean(sales)),
color="red", linetype="dashed", size=1)+
geom_vline(aes(xintercept=quantile(sales,seq(0,1,0.25))),
color="green3", linetype="dashed", size=1)+
geom_vline(aes(xintercept=median(sales)),
color="orange", linetype="dashed", size=1)+
xlab("Sales")+
ylab("Density")+
labs(title = "Distribuzione Sales")
modal(sales)
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
Mode(sales)
Mode(year)
table(year)
ggplot()+
geom_density(aes(x=sales),col="darkblue",fill="lightblue")+
geom_vline(aes(xintercept=mean(sales)),
color="red", linetype="dashed", size=1)+
geom_vline(aes(xintercept=quantile(sales,seq(0,1,0.25))),
color="green3", linetype="dashed", size=1)+
geom_vline(aes(xintercept=median(sales)),
color="orange", linetype="dashed", size=1)+
geom_vline(aes(xintercept=Mode(sales)),
color="yellow", linetype="dashed", size=1)+
xlab("Sales")+
ylab("Density")+
labs(title = "Distribuzione Sales")
#simmetria
skewness(sales)
#curtosi
kurtosis(sales)-3
#import librerie
library(ggplot2)
library(plotly)
library("gridExtra")
library("moments")
#INDICE DI ETEROGENEITA DI GINI
G <- function(x){
ni=table(x) #frequenze assolute
fi=ni/length(x)#frequenze relative
fi2 = fi^2 #frequenze relative al quadrato
J = length(table(x)) #tipi di classi che abbiamo
gini = 1-sum(fi2) #G=1-sommatoria di frequenze relative al quadrato
gini_norm = gini/((J-1)/J)
return(gini_norm)
}
#DATASET DISTRIBUZIONE ASSOLUTA
distribuzione_assoluta <- function(x){
n=length(x)
ni=table(x)
fi=table(x)/n
Ni=cumsum(table(x))
Fi=cumsum(table(x))/n
return(as.data.frame(cbind(ni,fi,Ni,Fi)))
}
#COEFFIECENTE DI VARIAZIONE
CV <- function(x){
return((sd(x)/mean(x))*100)
}
#Funzione che calcola la moda/classe modale
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
#import dataset
texas_price <- read.csv("realestate_texas.csv")
attach(texas_price)
#VOLUME
summary(volume)
IQR(volume)
max(volume)-min(volume)
Mode(volume)
ggplot()+
geom_density(aes(x=volume),col="darkblue",fill="lightblue")+
geom_vline(aes(xintercept=mean(volume)),
color="red", linetype="dashed", size=1)+
geom_vline(aes(xintercept=quantile(volume,seq(0,1,0.25))),
color="green3", linetype="dashed", size=1)+
geom_vline(aes(xintercept=median(volume)),
color="orange", linetype="dashed", size=1)+
geom_vline(aes(xintercept=Mode(volume)),
color="yellow", linetype="dashed", size=1)+
xlab("Sales")+
ylab("Density")+
labs(title = "Distribuzione Volume")
#simmetria
skewness(volume)
#curtosi
kurtosis(volume)-3
table(volume)
df_freq_volume
#dividiamo in classi il volume per osservarne la distribuzione di frequenza
volume_cl = cut(volume,seq(8000,85000,10000))#divisa in 7 classi da 1 centimetro l'uno
df_freq_volume = distribuzione_assoluta(volume_cl)
df_freq_volume
volume_cl
#dividiamo in classi il volume per osservarne la distribuzione di frequenza
volume_cl = cut(volume,seq(8000,85000,1000))#divisa in 7 classi da 1 centimetro l'uno
volume_cl
#dividiamo in classi il volume per osservarne la distribuzione di frequenza
volume_cl = cut(volume,seq(8,85,10))#divisa in 7 classi da 1 centimetro l'uno
volume_cl
df_freq_volume = distribuzione_assoluta(volume_cl)
df_freq_volume
#dividiamo in classi il volume per osservarne la distribuzione di frequenza
volume_cl = cut(volume,seq(8,90,10))#divisa in 7 classi da 1 centimetro l'uno
df_freq_volume = distribuzione_assoluta(volume_cl)
df_freq_volume
var_volume=var(volume)#quanto è varia la nostra distribuzione
sd_volume=sd(volume)#distanza media dei singoli dati
cv_volume=CV(volume)#ci salviamo il coefficente di variazione per futuri confronti
summary(df_freq_volume)
#simmetria
skewness(volume)
#curtosi
kurtosis(volume)-3
#MEDIAN PRICE
summary(median_price)
IQR(median_price)
max(median_price)-min(median_price)
Mode(median_price)
ggplot()+
geom_density(aes(x=median_price),col="darkblue",fill="lightblue")+
geom_vline(aes(xintercept=mean(median_price)),
color="red", linetype="dashed", size=1)+
geom_vline(aes(xintercept=quantile(median_price,seq(0,1,0.25))),
color="green3", linetype="dashed", size=1)+
geom_vline(aes(xintercept=median(median_price)),
color="orange", linetype="dashed", size=1)+
geom_vline(aes(xintercept=Mode(median_price)),
color="yellow", linetype="dashed", size=1)+
xlab("Sales")+
ylab("Density")+
labs(title = "Distribuzione Volume")
var_median_price=var(median_price)#quanto è varia la nostra distribuzione
sd_median_price=sd(median_price)#distanza media dei singoli dati
cv_median_price=CV(median_price)#ci salviamo il coefficente di variazione per futuri confronti
#simmetria
skewness(median_price)
#curtosi
kurtosis(median_price)-3
#dividiamo in classi il volume per osservarne la distribuzione di frequenza
median_price_cl = cut(volume,seq(70000,180000,10000))#divisa in 7 classi da 1 centimetro l'uno
df_freq_median_price = distribuzione_assoluta(median_price_cl)
df_freq_median_price
median_price_cl
median_price
#dividiamo in classi il volume per osservarne la distribuzione di frequenza
median_price_cl = cut(median_price,seq(70000,180000,10000))#divisa in 7 classi da 1 centimetro l'uno
df_freq_median_price = distribuzione_assoluta(median_price_cl)
df_freq_median_price
max(median_price)-min(median_price)
IQR(median_price)
Mode(median_price)
ggplot()+
geom_density(aes(x=median_price),col="darkblue",fill="lightblue")+
geom_vline(aes(xintercept=mean(median_price)),
color="red", linetype="dashed", size=1)+
geom_vline(aes(xintercept=quantile(median_price,seq(0,1,0.25))),
color="green3", linetype="dashed", size=1)+
geom_vline(aes(xintercept=median(median_price)),
color="orange", linetype="dashed", size=1)+
geom_vline(aes(xintercept=Mode(median_price)),
color="yellow", linetype="dashed", size=1)+
xlab("Sales")+
ylab("Density")+
labs(title = "Distribuzione Median_Price")
ggplot()+
geom_density(aes(x=median_price),col="darkblue",fill="lightblue")+
geom_vline(aes(xintercept=mean(median_price)),
color="red", linetype="dashed", size=1)+
geom_vline(aes(xintercept=quantile(median_price,seq(0,1,0.25))),
color="green3", linetype="dashed", size=1)+
geom_vline(aes(xintercept=median(median_price)),
color="orange", linetype="dashed", size=1)+
geom_vline(aes(xintercept=Mode(median_price)),
color="yellow", linetype="dashed", size=1)+
xlab("Sales")+
ylab("Density")+
labs(title = "Distribuzione Median Price")
ggplot()+
geom_density(aes(x=median_price),col="darkblue",fill="lightblue")+
geom_vline(aes(xintercept=mean(median_price)),
color="red", linetype="dashed", size=1)+
geom_vline(aes(xintercept=quantile(median_price,seq(0,1,0.25))),
color="green3", linetype="dashed", size=1)+
geom_vline(aes(xintercept=median(median_price)),
color="orange", linetype="dashed", size=1)+
geom_vline(aes(xintercept=Mode(median_price)),
color="yellow", linetype="dashed", size=1)+
xlab("Medina Price")+
ylab("Density")+
labs(title = "Distribuzione Median Price")
ggplot()+
geom_density(aes(x=volume),col="darkblue",fill="lightblue")+
geom_vline(aes(xintercept=mean(volume)),
color="red", linetype="dashed", size=1)+
geom_vline(aes(xintercept=quantile(volume,seq(0,1,0.25))),
color="green3", linetype="dashed", size=1)+
geom_vline(aes(xintercept=median(volume)),
color="orange", linetype="dashed", size=1)+
geom_vline(aes(xintercept=Mode(volume)),
color="yellow", linetype="dashed", size=1)+
xlab("Volume")+
ylab("Density")+
labs(title = "Distribuzione Volume")
#simmetria
skewness(median_price)
#curtosi
kurtosis(median_price)-3
#LISTING
summary(median_price)
#LISTING
summary(listings)
max(listings)-min(listings)
IQR(listings)
Mode(listings)
ggplot()+
geom_density(aes(x=listings),col="darkblue",fill="lightblue")+
geom_vline(aes(xintercept=mean(listings)),
color="red", linetype="dashed", size=1)+
geom_vline(aes(xintercept=quantile(listings,seq(0,1,0.25))),
color="green3", linetype="dashed", size=1)+
geom_vline(aes(xintercept=median(listings)),
color="orange", linetype="dashed", size=1)+
geom_vline(aes(xintercept=Mode(listings)),
color="yellow", linetype="dashed", size=1)+
xlab("Listings")+
ylab("Density")+
labs(title = "Distribuzione Listings")
var_listings=var(listings)#quanto è varia la nostra distribuzione
sd_listings=sd(listings)#distanza media dei singoli dati
cv_listings=CV(listings)#ci salviamo il coefficente di variazione per futuri confronti
#simmetria
skewness(listings)
#curtosi
kurtosis(listings)-3
#MONTHS INVENTORY
summary(months_inventory)
max(months_inventory)-min(months_inventory)
IQR(months_inventory)
Mode(months_inventory)
var_months_inventory=var(months_inventory)#quanto è varia la nostra distribuzione
sd_months_inventory=sd(months_inventory)#distanza media dei singoli dati
cv_months_inventory=CV(months_inventory)#ci salviamo il coefficente di variazione per futuri confronti
ggplot()+
geom_density(aes(x=months_inventory),col="darkblue",fill="lightblue")+
geom_vline(aes(xintercept=mean(months_inventory)),
color="red", linetype="dashed", size=1)+
geom_vline(aes(xintercept=quantile(months_inventory,seq(0,1,0.25))),
color="green3", linetype="dashed", size=1)+
geom_vline(aes(xintercept=median(months_inventory)),
color="orange", linetype="dashed", size=1)+
geom_vline(aes(xintercept=Mode(months_inventory)),
color="yellow", linetype="dashed", size=1)+
xlab("Months inventory")+
ylab("Density")+
labs(title = "Distribuzione Months inventory")
#simmetria
skewness(months_inventory)
#curtosi
kurtosis(months_inventory)-3
#import librerie
library(ggplot2)
library(plotly)
library("gridExtra")
library("moments")
#INDICE DI ETEROGENEITA DI GINI
G <- function(x){
ni=table(x) #frequenze assolute
fi=ni/length(x)#frequenze relative
fi2 = fi^2 #frequenze relative al quadrato
J = length(table(x)) #tipi di classi che abbiamo
gini = 1-sum(fi2) #G=1-sommatoria di frequenze relative al quadrato
gini_norm = gini/((J-1)/J)
return(gini_norm)
}
#DATASET DISTRIBUZIONE ASSOLUTA
distribuzione_assoluta <- function(x){
n=length(x)
ni=table(x)
fi=table(x)/n
Ni=cumsum(table(x))
Fi=cumsum(table(x))/n
return(as.data.frame(cbind(ni,fi,Ni,Fi)))
}
#COEFFIECENTE DI VARIAZIONE
CV <- function(x){
return((sd(x)/mean(x))*100)
}
#Funzione che calcola la moda/classe modale
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
#import dataset
texas_price <- read.csv("realestate_texas.csv")
attach(texas_price)
G(city)
#SALES
#Calcoliamo indici di posizione
sales_range = max(sales)-min(sales)
sales_sumary = summary(sales)
sales_sumary
sales_summary = summary(sales)
sales_IQR=IQR(sales)
var_sales=var(sales)#quanto è varia la nostra distribuzione
sd_sales=sd(sales)#distanza media dei singoli dati
cv_sales=CV(sales)#ci salviamo il coefficente di variazione per futuri confronti
#simmetria
ass_sales = skewness(sales)
#curtosi
curtosi_sales = kurtosis(sales)-3
mode_sales = Mode(sales)
#VOLUME
volume_range = max(volume)-min(volume)
volume_summary = summary(volume)
volume_IQR=IQR(volume)
mode_volume = Mode(volume)
var_volume=var(volume)#quanto è varia la nostra distribuzione
sd_volume=sd(volume)#distanza media dei singoli dati
cv_volume=CV(volume)#ci salviamo il coefficente di variazione per futuri confronti
#simmetria
ass_volume=skewness(volume)
#curtosi
curtosi_volume=kurtosis(volume)-3
#MEDIAN PRICE
median_price_range = max(median_price)-min(median_price)
median_price_summary = summary(median_price)
median_price_IQR=IQR(median_price)
mode_median_price = Mode(median_price)
var_median_price=var(median_price)#quanto è varia la nostra distribuzione
sd_median_price=sd(median_price)#distanza media dei singoli dati
cv_median_price=CV(median_price)#ci salviamo il coefficente di variazione per futuri confronti
#simmetria
ass_median_price=skewness(median_price)
#curtosi
curtosi_median_price=kurtosis(median_price)-3
#LISTING
listings_range = max(listings)-min(listings)
listings_summary = summary(listings)
listings_IQR=IQR(listings)
mode_listings = Mode(listings)
var_listings=var(listings)#quanto è varia la nostra distribuzione
sd_listings=sd(listings)#distanza media dei singoli dati
cv_listings=CV(listings)#ci salviamo il coefficente di variazione per futuri confronti
#simmetria
ass_listings=skewness(listings)
#curtosi
curtosi_listings=kurtosis(listings)-3
#MONTHS INVENTORY
months_inventory_range = max(months_inventory)-min(months_inventory)
months_inventory_summary = summary(months_inventory)
months_inventory_IQR=IQR(months_inventory)
mode_months_inventory = Mode(months_inventory)
var_months_inventory=var(months_inventory)#quanto è varia la nostra distribuzione
sd_months_inventory=sd(months_inventory)#distanza media dei singoli dati
cv_months_inventory=CV(months_inventory)#ci salviamo il coefficente di variazione per futuri confronti
#simmetria
ass_months_inventory=skewness(months_inventory)
#curtosi
curtosi_months_inventory=kurtosis(months_inventory)-3
volume_summary
volume_summary$Min
volume_summary["Min"]
volume_summary["Min."]
table(price_summary)
table(sales_summary)
cbind(sales_summary,volume_summary)
cbind(sales_summary,volume_summary,median_price_summary,listings_summary,months_inventory_summary)
cbind(sales_summary,volume_summary,median_price_summary,listings_summary,months_inventory_summary,sales_IQR)
cbind(sales_summary,volume_summary,median_price_summary,listings_summary,months_inventory_summary)
as.data.frame(cbind(sales_summary,volume_summary,median_price_summary,listings_summary,months_inventory_summary))
df_summary = as.data.frame(cbind(sales_summary,volume_summary,median_price_summary,listings_summary,months_inventory_summary))
View(df_summary)
df2 = data.frame(id = 33, pages=50, name = "java")
View(df2)
df2 = data.frame(id=c(11,22),
pages=c(32,45),
name=c("spark","python"))
rbind(df_summary,df_2)
rbind(df_summary,df2)
rownames(df2) <- c("Row1","Row2")
View(df2)
df2 = data.frame(sales_summary=c(var_sales,sd_sales,cv_sales,ass_sales,curtosi_sales),
pages=c(32,45),
name=c("spark","python"))
df2 = data.frame(sales_summary=c(var_sales,sd_sales),
pages=c(32,45),
name=c("spark","python"))
View(df_summary)
df2 = data.frame(sales_summary=c(sales_range,sales_IQR,mode_sales,var_sales,
sd_sales,cv_sales,ass_sales,curtosi_sales),
volume_summary=c(volume_range,volume_IQR,mode_volume,var_volume,
sd_volume,cv_volume,ass_volume,curtosi_volume),
median_price_summary=c(median_price_range,median_price_IQR,mode_median_price,
var_median_price,sd_median_price,cv_median_price,
ass_median_price,curtosi_median_price),
listings_summary=c(listings_range,listings_IQR,mode_listings,var_listings,
sd_listings,cv_listings,ass_listings,curtosi_listings),
months_inventory_summary=c(months_inventory_range,months_inventory_IQR,mode_months_inventory,
var_months_inventory,sd_months_inventory,cv_months_inventory,
ass_months_inventory,curtosi_months_inventory))
View(df2)
View(df_summary)
rownames(df2) <- c("Range","IQR","Mode","Var","SD","CV","Asymmetry","Curtosi")
rbind(df_summary,df2)
df_all_value = rbind(df_summary,df2)
View(df_all_value)
pdf("Summary All value.pdf")#Exsport pdf
grid.table(df_all_value)
dev.off()
png("test.png", height = 50*nrow(df_all_value), width = 200*ncol(ddf_all_valuef))
png("test.png", height = 50*nrow(df_all_value), width = 200*ncol(df_all_valuef))
png("test.png", height = 50*nrow(df_all_value), width = 200*ncol(df_all_value))
grid.table(df_all_value)
dev.off()
png("test.png", height = 50*nrow(df_all_value), width = 100*ncol(df_all_value))
grid.table(df_all_value)
dev.off()
png("test.png", height = 30*nrow(df_all_value), width = 200*ncol(df_all_value))
grid.table(df_all_value)
dev.off()
png("test.png", height = 20*nrow(df_all_value), width = 200*ncol(df_all_value))
grid.table(df_all_value)
dev.off()
png("test.png", height = 30*nrow(df_all_value), width = 180*ncol(df_all_value))
grid.table(df_all_value)
dev.off()
png("test.png", height = 30*nrow(df_all_value), width = 170*ncol(df_all_value))
grid.table(df_all_value)
dev.off()
#prezzo di vendita per citta
fig <- plot_ly(
x = city,
y = sales,
type = "bar"
)
fig
#prezzo di vendita per citta
ggplot()+
geom_bar(aes(x=city,y=sales),
position = "stack",
stat = "count",
col = "black")+
labs(title="distribuzione delle classi di lunghezza",
x="Lunghezza in classi, cm",
y="Frequenze assolute")+
scale_y_continuous(breaks = seq(0,30))+
theme_classic()
#prezzo di vendita per citta
ggplot()+
geom_bar(aes(x=city,y=sales),
position = "stack",
stat = "count",
col = "black")+
labs(title="distribuzione delle classi di lunghezza",
x="Lunghezza in classi, cm",
y="Frequenze assolute")+
theme_classic()
#prezzo di vendita per citta
ggplot()+
geom_bar(aes(x=city,y=sales),
position = "stack",
col = "black")+
labs(title="distribuzione delle classi di lunghezza",
x="Lunghezza in classi, cm",
y="Frequenze assolute")+
theme_classic()
#prezzo di vendita per citta
ggplot(data=texas_price, aes(x=city, y=sales)) +
geom_bar(stat="identity", width=0.5)
#prezzo di vendita per citta
ggplot(data=texas_price, aes(x=city, y=sales)) +
geom_bar(stat="identity", fill="steelblue")+
theme_minimal()
#prezzo di vendita per citta
ggplot(data=texas_price, aes(x=city, y=sales)) +
geom_bar(stat="identity", color="blue",fill="white",width=0.5)+
theme_minimal()
#prezzo di vendita per citta
ggplot(data=texas_price, aes(x=city, y=sales)) +
geom_bar(stat="identity", fill="steelblue", width=0.5)+
theme_minimal()
ggplot(data=texas_price, aes(x=city, y=listings)) +
geom_bar(stat="identity", fill="steelblue", width=0.5)+
theme_minimal()
# Use position=position_dodge()
ggplot(data=texas_price, aes(x=city, y=listings)) +
geom_bar(stat="identity", position=position_dodge())
ggplot(data=texas_price, aes(x=city, y=listing)) +
geom_bar(stat="identity", fill="steelblue", width=0.5)+
theme_minimal()
ggplot(data=texas_price, aes(x=city, y=listings)) +
geom_bar(stat="identity", fill="steelblue", width=0.5)+
theme_minimal()
ggplot(data=texas_price) +
geom_bar(aes(x=city, y=listings)stat="identity", fill="steelblue", width=0.5)+
ggplot(data=texas_price) +
geom_bar(aes(x=city, y=listings),stat="identity", fill="steelblue", width=0.5)+
theme_minimal()
ggplot(data=texas_price) +
geom_bar(aes(x=city, y=listings),stat="identity", fill="steelblue", width=0.5)+
geom_bar(aes(x=city, y=sale),stat="identity", fill="orange", width=0.5)+
theme_minimal()
ggplot(data=texas_price) +
geom_bar(aes(x=city, y=listings),stat="identity", fill="steelblue", width=0.5)+
geom_bar(aes(x=city, y=salea),stat="identity", fill="orange", width=0.5)+
theme_minimal()
