#quartili
#la mediana e il secondo quaritle e lo abbiamo gia trovato
#dobbiamo trovare ora il 1 e il 3 quartile
sort(Petal.Length)[38]
#mentre per il 3 sara n/4 *3 che dara
n/4*3
#mentre per il 3 sara n/4 *3 che dara
(n/4)*3
#mentre per il 3 sara n/4 *3 che dara 122.5 arrotondato sara 123
sort(Petal.Length)[123]
#la funzione di R è
quantile(Petal.Length)
#mentre per il 3 sara n/4 *3 che dara 112.5 arrotondato sara 113
sort(Petal.Length)[113]
quantile(Petal.Length,c(0,1,0.1))
quantile(Petal.Length,c(0,2,0.1))
quantile(Petal.Length,c(0,150,0.1))
quantile(Petal.Length,seq(0,1,0.1))#cosi troviamo i decili
quantile(Petal.Length,seq(0,1,1))#cosi troviamo i decili
quantile(Petal.Length,seq(0,10,0.1))#cosi troviamo i decili
quantile(Petal.Length,seq(0,1,0.2))#cosi troviamo i decili
quantile(Petal.Length,seq(0,1,0.2))#cosi troviamo i quintili
quantile(Petal.Length,seq(0,1,0.01))#cosi troviamo i percentili
#media
sum(Petal.Length)/n
mean(Petal.Length)
median(Petal.Length)#funzione automatica
mean(Petal.Length)
#dimostriamo che la mediana è molto più forte
x = c(Petal.Length,541,378)
mean(x)
median(x)
#dividiamo in classi e costruiamo la ditribuzione di frequenza in classi
Petal_Length_cl = cut(Petal.Length,seq(0,7,1))
table(Petal_Length_cl)
fi = table(Petal_Length_cl)/n
fi
ni
ni = table(Petal_Length_cl)
ni
Ni = cumsum(Petal_Length_cl)
Ni = cumsum(table(Petal_Length_cl))
Fi = cumsum(table(Petal_Length_cl))/n
dist_freq = as.data.frame(cbind(ni,fi,Ni,Fi))
dist_freq
table(Petal_Length_cl)
#classe modale (classe con più elemenetni)
median(dist_freq$ni)
quantile(dist_freq$ni)
#funzione di R
quantile(Petal.Length)#trova anche min e max
dist_freq
#classe modale (classe con più elemenetni)
median(dist_freq$ni)
median(Petal.Length)#funzione automatica
mean(Petal.Length)
#la mediana
median(dist_freq$ni)
#funzione di R
quantile(Petal.Length)#trova anche min e max
dist_freq
#Media Ponderata
dist_freq$cxi = seq(0,6.5,1)#aggiungi la righa come sequenza che va da 0 a 6.5 di passo 1
dist_freq
#Media Ponderata
dist_freq$cxi = seq(0.5,6.5,1)#aggiungi la righa come sequenza che va da 0 a 6.5 di passo 1
dist_freq
sum(dist_freq$cxi*ni)/n
sum(dist_freq$cxi*dist_freq$ni)/n
weighted.mean(dist_freq$cxi,ni)
install.packages("quantmod")
library(quantmod)
incrementi = quantmod::Delt(cellule)*100
#MEDIA GEOMETRICA
cellule = c(1000,1800,2100,3000,5000)#abbiamo un esempio che mostra il numero di cellule in giorni diversi
incrementi = quantmod::Delt(cellule)*100
incrementi
#facciamo in modo che incrementi sia un vettore
incrementi = [-1,1]
#facciamo in modo che incrementi sia un vettore
incrementi = incrementi[-1,1]
incrementi
geometric_min <- function(vettore){
return(prod(vettore)^(1/length(vettore)))#radice di n del prodotto di tutti i dati
}
geometric_min(incrementi)
mean(incrementi)
#una volta finito usiamo il detach per riattacare le colonne
detach()
#la velocita media di percorrenza di queste 4 velocità (serve la media armonica)
1/speed
#MEDIA ARMONICA
speed <- c(100,80,40,90)#velocita nei vari tratti di strada e noi vogliamo
#la velocita media di percorrenza di queste 4 velocità (serve la media armonica)
1/speed
#la velocita media di percorrenza di queste 4 velocità (serve la media armonica)
1/mean(1/speed)
mean(speed)
return(1/mean(1/vettore))
return(1 / (sum(1/vettore)/length(vettore)))
return(1/(sum(1/y)/length(y)))
return(1/(sum(1/vettore)/length(vettore)))
return(1 / (sum(1/x)/length(x)) )
return(1 / (sum(1/x)/length(x)) )
return(1/(sum(1/x)/length(x)) )
armonic_mean <- function(x){
return(1/(sum(1/x)/length(x)) )
}
return(1/(sum(1/x)/length(x)) )
return(1/(sum(1/x)/length(x)))
armonic_mean <- function(x){
return(1/(sum(1/x)/length(x)))
}
armonic_mean2 <- function(x){
return(1/mean(1/x))
}
#la velocita media di percorrenza di queste 4 velocità (serve la media armonica)
1/mean(1/speed)#abbiamo dovuto scriverla perche non esiste la funzione di R
armonic_mean(speed)
armonic_mean2(speed)
#generiamo 100 000 valori di una distribizione normale
normale_standard <- rnorm(100000,0,1)#distribuzxione normale standard
#visualiziamola
hist(normale_standard,freq = F,breaks = 100)
lines(density(normale_standard),col=2,lwd=3)
#allarghiamo il grafico
plot(density(normale_standard),xlim=c(-4,12))
#creiamo un altra distribuzione
normale1 <- rnorm(100000,5,2)
lines(density(normale1),col=2)
#creiamo un altra distribuzione
normale2 <- rnorm(100000,5,1.5)
lines(density(normale2),col=3)
#STANDARDIZZAZIONE
#rendere ua distribuzione normale una normale standard
Z <- (normale1-mean(normale1))/sd(normale1)
#confrontiamola e notiamo che e uguale alla normale standard
lines(density(Z),col=4)
altezza <- rnorm(100000,mu,sigma)
mu=170 #media (avremo una media di 1.70 di altezza)
sigma=10 #deviazione
altezza <- rnorm(100000,mu,sigma)
plot(density(altezza))
abline(v=mu,col=2)#una linea che taglia la media
#come calcolo la probabilita che una persona sia alta almeno 1.70 ?
pnorm(170,mu,sigma)#usiamo la funzione pnorm
#e se volessi sapere la probabolota che una persona sia alta 1.55
abline(v=155,col=2)
pnorm(155,mu,sigma)
#ma come si sarebbe calcolato la probabili di un altezza un tempo ?
#avremmo normalizzato la distribuzione rendendola una normale standard
altezza_stnd<-(altezza-mu)/sigma
#poi bisogna standardizzare il valore i riferimento (189-167)
Z189 <- (189-mu)/sigma
Z167 <- (167-mu)/sigma
plot(density(altezza_stnd))
#
data("iris")
plot(density(iris$Petal.Length))
#INDICI DI VARIABILITA
library(ggplot2)
data("diamonds")#dataset con carateristiche dei diamanti
install.packages("ggplot2")
#INDICI DI VARIABILITA
library(ggplot2)
data("diamonds")#dataset con carateristiche dei diamanti
#funzione che fa un riassunto di tutti gli indici di posizione
summary(diamonds)
ggplot()+
geom_point(aes(x=seq(1,length(price)),y=sort(price)))+
geom_hline(yintercept = quantile(price),col="red")+
geom_label(aes(x=50000,
y=quantile(price),
label=quantile(price)),
col="red")
x11()#creiamo una finestra volante che rimepiero con i grafici
attach(diamonds)
ggplot()+
geom_point(aes(x=seq(1,length(price)),y=sort(price)))+
geom_hline(yintercept = quantile(price),col="red")+
geom_label(aes(x=50000,
y=quantile(price),
label=quantile(price)),
col="red")
#con ggplo
ggplot(data=diamonds)+
geom_boxplot(aes(x=color
,y=price),
fill="lightblue")
#mettiamo a confronto 3 variabili
#sulle x abbiamo il colore
#sulle y il prezzo
# e li coloriamo in base al taglio
ggplot(data=diamonds)+
geom_boxplot(aes(x=color
,y=price,
fill=cut))
X <- rnorm(10000,10,2)
plot(density(X))
momento.terzo = (sum(X-mu)^3)/length(X)
#ASSIMETRIA
#indice di fisher
mu = mean(X)
momento.terzo = (sum(X-mu)^3)/length(X)
sigma = ds(X)
sigma = sd(X)
n = length(X)
momento.terzo = (sum(X-mu)^3)/n
m3 = (sum(X-mu)^3)/n
X <- rnorm(10000,10,2)
plot(density(X))
#ASSIMETRIA
#indice di fisher
mu = mean(X)
sigma = sd(X)
n = length(X)
m3 = (sum(X-mu)^3)/n
X <- rnorm(100000,10,2)
plot(density(X))
#ASSIMETRIA
#indice di fisher
mu = mean(X)
sigma = sd(X)
n = length(X)
m3 = (sum(X-mu)^3)/n
#formula di assimetria
assim = m3/(sigma)^3
#formula di assimetria
assim = m3 / sigma^3
X <- rnorm(100000,10,2)
plot(density(X))
#ASSIMETRIA
#indice di fisher
mu = mean(X)
sigma = sd(X)
n = length(X)
m3 = (sum(X-mu)^3)/n
#formula di assimetria
assim = m3 / sigma^3
assim
X <- rnorm(10000,10,2)
plot(density(X))
#ASSIMETRIA
#indice di fisher
mu = mean(X)
sigma = sd(X)
n = length(X)
m3 = (sum(X-mu)^3)/n
#formula di assimetria
assim = m3 / sigma^3
#CURTOSI
curtosi = (sum(X-mu)^4)/n
#CURTOSI
m4 = (sum(X-mu)^4)/n
curtosi= assim = (m3 / sigma^4)-3
curtosi= assim = (m4 / sigma^4)-3
#MOMENTO 4
m4 = (sum(X-mu)^4)/n
#CURTOSI
curtosi= assim = (m4 / sigma^4)-3
#CURTOSI
curtosi= assim = m4 / sigma^4 -3
X <- rnorm(100000,10,2)
plot(density(X))
mu = mean(X)
sigma = sd(X)
n = length(X)
#MOMENTO 3
m3 = (sum(X-mu)^3)/n
#formula di assimetria/#indice di fisher
assim = m3 / sigma^3
#MOMENTO 4
m4 = (sum(X-mu)^4)/n
#CURTOSI
curtosi= assim = (m4 / sigma^4)-3
#CURTOSI
curtosi= assim = (m4 / sigma^4) -3
X <- rnorm(100000,11,2)
source("G:/Il mio Drive/Professo AI/Statistica descrittiva/7)Indici di Forma.R")
X <- rnorm(100000,11,2)
X <- rnorm(100000,11,2)
X <- rnorm(100000,11,2)
plot(density(X))
X <- rnorm(100000,10,25)
plot(density(X))
X <- rnorm(100000,10,250)
plot(density(X))
X <- rnorm(100000,10,4)
plot(density(X))
mu = mean(X)
sigma = sd(X)
n = length(X)
#MOMENTO 3
m3 = (sum(X-mu)^3)/n
#formula di assimetria/#indice di fisher
assim = m3 / sigma^3
#MOMENTO 4
m4 = (sum(X-mu)^4)/n
#CURTOSI
curtosi= (m4 / sigma^4) -3
install.packages("moments")
#moments
library("moments")
#simmetria
skewness(x)
#simmetria
skewness(X)
kurtosis(X)
#MOMENTO 4
m4 = sum (X-mu)^4 / n
#MOMENTO 3
m3 = sum(X-mu)^3 /n
#formula di assimetria/#indice di fisher
assim = m3 / sigma^3
#CURTOSI
curtosi = (m4 / sigma^4) -3
#CURTOSI
curtosi = (m4 / sigma^4)
kurtosis(X)
#CURTOSI
curtosi = (m4 / sigma^4) -3
#CURTOSI
curtosi = (m4 / sigma^4)
curtosi-3
curtosi
kurtosis(X)
#CURTOSI
curtosi = (m4 / sigma^4)-3
#MOMENTO 4
m4 =  (sum(X-mu)^4 )/ n
#CURTOSI
curtosi = m4/sigma^4 -3
kurtosis(X)-3
kurtosis(X)
library(ggplot2)
data("diamonds")
attach()
attach(diamonds)
dist <- rnorm(100000,10,4)
plot(density(dist))
mu = mean(dist)
sigma = sd(dist)
n = length(dist)
#MOMENTO 3
m3 = sum(dist-mu)^3 /n
#formula di assimetria/#indice di fisher
assim = m3 / sigma^3
#MOMENTO 4
m4 =  (sum(dist-mu)^4 )/ n
#CURTOSI
curtosi = m4/sigma^4 -3
#moments
library("moments")
#simmetria
skewness(dist)
#ma in questa funzione dobbiamo fare -3 perche e centrata in 3
kurtosis(dist)
#CURTOSI
curtosi = m4/sigma^4
#CURTOSI
curtosi = (m4/sigma^4) -3
library(ggplot2)
data("diamonds")
attach(diamonds)
plot(density(price))
ggplot()+
geom_density(aes(x=price),col="black",fill="lightblue")
#simmetria
skewness(price)
#curtosi
kurtosis(price)-3
install.packages("gghalves")
mean(price)
median(price)
summary(price)
View(table(price))
View(table(price))
#libreria gghalves
library(gghalves)
ggplot()+
geom_half_boxplot(aes(x=cut,y=price),side = "l",fill="pink")
ggplot()+
geom_half_boxplot(aes(x=cut,y=price),side = "l",fill="pink")+
geom_half_violin(aes(x=cut,y=price),side = "r",fill="lightblue")
#Import del dataset
texas_price <- read.csv("realestate_texas.csv")
getwd()
setwd("C:\Users\gabri\Desktop\PrivateProject\Analisi-Statistica-Vendite-Texas")
setwd("C:\U\gabri\Desktop\PrivateProject\Analisi-Statistica-Vendite-Texas")
setwd(C:\U\gabri\Desktop\PrivateProject\Analisi-Statistica-Vendite-Texas)
setwd(C:\Users\gabri\Desktop\PrivateProject\Analisi-Statistica-Vendite-Texas)
setwd(gabri\Desktop\PrivateProject\Analisi-Statistica-Vendite-Texas)
setwd(\Users\gabri\Desktop\PrivateProject\Analisi-Statistica-Vendite-Texas)
#Import del dataset
setwd("C:\Users\gabri\Desktop\PrivateProject\Analisi-Statistica-Vendite-Texas")
#Import del dataset
setwd("C:\\Users\gabri\Desktop\PrivateProject\Analisi-Statistica-Vendite-Texas")
#Import del dataset
setwd("C:\\Users\\gabri\\Desktop\\PrivateProject\\Analisi-Statistica-Vendite-Texas")
texas_price <- read.csv("realestate_texas.csv")
#Diamo un occhiata al dataset
head(texas_price)
#Diamo un occhiata al dataset
head(texas_price,10)
attach(texas_price)
#costruiamo la distribuzione di frequenza per la variabile città
ni=table(city)
ni
fi=table(city)/n
fi <- table(city)/length(city)
fi
Ni <- table(cumsum(city))
Ni
Ni <- table(cumsum(ni))
Ni
Fi <- table(Ni)/length(city)
Fi
Ni <- cumsum(table(city))
Fi <- cumsum(table(city))/length(city)
Ni
Fi
#distribuzione di frequenza per specie
distr_freq_city = cbind(ni,fi)
distr_freq_city
plot(density(city))
summary(city)
lenght(city)
length(city)
distr_freq_city
#distribuzione di frequenza assoluta e relativa per citta
distr_freq_ass_city = cbind(ni,fi)
#distribuzione di frequenza assoluta per citta e anno
distr_freq_city_ass_anno = table(city,year)
#distribuzione di frequenza relativa per citta e anno
distr_freq_rel_city_anno = table(city,year)/length(city)
distr_freq_city_ass_anno
texas_price <- read.csv("realestate_texas.csv")
#Diamo un occhiata al dataset
head(texas_price,10)
attach(texas_price)
#costruiamo la distribuzione di frequenza per la variabile città
ni <- table(city)
fi <- table(city)/length(city)
#distribuzione di frequenza assoluta e relativa per citta
distr_freq_ass_city = cbind(ni,fi)
#distribuzione di frequenza assoluta per citta e anno
distr_freq_ass_city_anno = table(city,year)
#distribuzione di frequenza relativa per citta e anno
distr_freq_rel_city_anno = table(city,year)/length(city)
distr_freq_city_ass_anno
distr_freq_rel_city_anno
#diamo un occhiata allre frequenze relative doppie
#distribuzione di frequenza assoluta per citta e anno
distr_freq_ass_city_sales = table(city,sales)
distr_freq_ass_city_sales
sales
#diamo un occhiata allre frequenze relative doppie
#distribuzione di frequenza assoluta per citta e anno
distr_freq_ass_city_mese = table(city,mounth)
#diamo un occhiata allre frequenze relative doppie
#distribuzione di frequenza assoluta per citta e anno
distr_freq_ass_city_mese = table(city,month)
distr_freq_ass_city_mese
texas_price <- read.csv("realestate_texas.csv")
#Diamo un occhiata al dataset
head(texas_price,10)
attach(texas_price)
#costruiamo la distribuzione di frequenza per la variabile città
ni <- table(city)
fi <- table(city)/length(city)
#distribuzione di frequenza assoluta e relativa per citta
distr_freq_ass_city = cbind(ni,fi)
#diamo un occhiata allre frequenze relative doppie
#distribuzione di frequenza assoluta per citta e anno
distr_freq_ass_city_mese = table(city,year)
#distribuzione di frequenza relativa per citta e anno
distr_freq_rel_city_anno = table(city,year)/length(city)
#Diamo un occhiata al dataset
head(texas_price,10)
#Calcoliamo indici di posizione
summary(year)
year
plot(density(year))
ggplot()+
geom_density(aes(x=year),col="black",fill="lightblue")
plot(density(price))
fig <- plot_ly(x = ~year,
type = 'scatter', mode = 'lines',
name = 'Fair cut', fill = 'tozeroy')
plot(density(year))
#Calcoliamo indici di posizione
summary(year)
IQR(year)
#QR
5324-950
#Diamo un occhiata al dataset
head(texas_price,10)
#Calcoliamo indici di posizione
summary(sales)
ggplot()+
geom_density(aes(x=sales),col="black",fill="lightblue")
plot(density(sales))
ggplot()+
geom_density(aes(x=sales),col="black",fill="lightblue")
ggplot()+
geom_density(aes(x=sales),col="black",fill="lightblue")+
labels(x="vendite",y="densita")
ggplot()+
geom_density(aes(x=sales),col="black",fill="lightblue")+
labels(aes(x="vendite",y="densita"))
ggplot()+
geom_density(aes(x=sales,y=year),col="black",fill="lightblue")
